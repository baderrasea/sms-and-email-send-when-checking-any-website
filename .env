const express = require('express');
const bodyParser = require('body-parser');
const { firefox } = require('@playwright/test');
const nodemailer = require('nodemailer');
const fs = require('fs');
const path = require('path');

// --- Persistent Storage Setup ---
const storageFilePath = path.join(__dirname, 'searchPhrases.json');
const defaultPhrases = [
  "Der Server ist ausgelastet",
  "The server is currently busy",
  "Le server est occupé",
  "El servidor está saturado",
  "Сервер перегружен",
  "El servidor está ocupado",
];

// --- State Management ---
const sharedState = {
  phrases: loadPhrases(),
  lastResponse: "Initializing...",
  status: null,
  isChecking: false,
  lastChecked: null
};

function loadPhrases() {
  try {
    if (fs.existsSync(storageFilePath)) {
      const data = JSON.parse(fs.readFileSync(storageFilePath, 'utf8'));
      return Array.isArray(data?.phrases) ? data.phrases : defaultPhrases;
    }
  } catch (err) {
    console.error('Storage error:', err);
  }
  return [...defaultPhrases];
}

function savePhrases(phrases) {
  fs.writeFileSync(storageFilePath, JSON.stringify({ phrases }, null, 2));
}

// --- Monitoring Core ---
const config = {
  url: 'https://service2.diplo.de/rktermin/extern/appointment_showMonth.do?locationCode=mask&realmId=354&categoryId=1638&dateStr=09.02.2025',
  checkInterval: 45_000,
  browserTimeout: 60_000,
  navigationTimeout: 60_000
};

// --- Notification Services ---
const emailTransporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER || 'badraldeenrasea@gmail.com',
    pass: process.env.EMAIL_PASS || 'lenp ozew pevq cmey'
  }
});

const twilioClient = require('twilio')(
  process.env.TWILIO_SID || 'ACe49c9576b39f7bed379e3df12948bbd2',
  process.env.TWILIO_TOKEN || '0e8143121cd6e97d6ee8513279afe613'
);

// --- Monitoring Logic ---
async function performCheck() {
  if (sharedState.isChecking) return;
  sharedState.isChecking = true;

  let browser;
  try {
    browser = await firefox.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--single-process'
      ],
      timeout: config.browserTimeout
    });

    const page = await browser.newPage();
    await page.goto(config.url, {
      waitUntil: 'domcontentloaded',
      timeout: config.navigationTimeout
    });

    const content = await page.content();
    sharedState.lastResponse = content;
    sharedState.lastChecked = new Date();

    const foundPhrases = sharedState.phrases.filter(p => content.includes(p));
    updateSystemState(foundPhrases);

  } catch (error) {
    handleMonitoringError(error);
  } finally {
    if (browser) await browser.close().catch(console.error);
    sharedState.isChecking = false;
  }
}

function updateSystemState(foundPhrases) {
  const newStatus = foundPhrases.length ? 'found' : 'not_found';
  if (sharedState.status === newStatus) return;

  const timestamp = sharedState.lastChecked.toLocaleString();
  const message = foundPhrases.length 
    ? `Found: ${foundPhrases.join(', ')} at ${timestamp}`
    : `No phrases found at ${timestamp}`;

  sendNotifications(message, newStatus);
  sharedState.status = newStatus;
}

function sendNotifications(message, status) {
  const subject = status === 'found' 
    ? 'Phrases Detected' 
    : 'No Phrases Found';

  emailTransporter.sendMail({
    from: process.env.EMAIL_FROM || 'baderrasaa8@gmail.com',
    to: 'kidsundkinder@gmail.com, baderrasaa8@gmail.com',
    subject,
    text: message
  }).catch(console.error);

  twilioClient.messages.create({
    body: message,
    from: process.env.TWILIO_NUMBER || '+19785107097',
    to: process.env.MY_NUMBER || '+967778956556'
  }).catch(console.error);

  if (status === 'not_found') {
    twilioClient.calls.create({
      twiml: `<Response><Say>${message}</Say></Response>`,
      from: process.env.TWILIO_NUMBER,
      to: process.env.MY_NUMBER
    }).catch(console.error);
  }
}

function handleMonitoringError(error) {
  console.error('Monitoring failure:', error);
  sharedState.status = 'error';
  sharedState.lastResponse = `Error: ${error.message}`;
  
  const errorMessage = `Monitoring failed: ${error.message}`;
  emailTransporter.sendMail({
    from: process.env.EMAIL_FROM,
    to: 'kidsundkinder@gmail.com, baderrasaa8@gmail.com',
    subject: 'Monitoring Alert',
    text: errorMessage
  }).catch(console.error);
}

// --- Web Interface ---
const app = express();
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('public'));

app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html dir="rtl" lang="ar">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>مراقبة المواعيد</title>
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
      <style>
        .status-indicator {
          width: 20px;
          height: 20px;
          border-radius: 50%;
          display: inline-block;
          margin-left: 10px;
        }
        .status-found { background-color: #28a745; }
        .status-notfound { background-color: #dc3545; }
        .status-error { background-color: #ffc107; }
      </style>
    </head>
    <body class="container py-5">
      <h1 class="mb-4">نظام المراقبة<small class="text-muted fs-5"> النسخة 1.0</small></h1>
      
      <div class="card mb-4">
        <div class="card-header">حالة النظام</div>
        <div class="card-body">
          <h5 class="card-title">
            الحالة الحالية: 
            <span class="status-indicator status-${sharedState.status || 'error'}"></span>
            ${getStatusText(sharedState.status)}
          </h5>
          <p class="card-text">آخر فحص: ${sharedState.lastChecked?.toLocaleString() || 'لم يتم التنفيذ بعد'}</p>
        </div>
      </div>

      <div class="card mb-4">
        <div class="card-header">إدارة العبارات</div>
        <div class="card-body">
          <form method="POST">
            <div class="mb-3">
              <label class="form-label">العبارات المطلوبة (كل عبارة في سطر):</label>
              <textarea class="form-control" name="phrases" rows="8" 
                required>${sharedState.phrases.join('\n')}</textarea>
            </div>
            <button type="submit" class="btn btn-primary w-100">حفظ التعديلات</button>
          </form>
        </div>
      </div>

      <div class="card">
        <div class="card-header">تفاصيل آخر استجابة</div>
        <div class="card-body">
          <pre class="bg-light p-3 rounded">${sharedState.lastResponse}</pre>
        </div>
      </div>

      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    </body>
    </html>
  `);
});

function getStatusText(status) {
  const statusMap = {
    found: 'تم العثور على العبارات',
    not_found: 'لم يتم العثور على العبارات',
    error: 'حالة خطأ'
  };
  return statusMap[status] || 'غير معروف';
}

app.post('/', (req, res) => {
  if (req.body.phrases) {
    sharedState.phrases = req.body.phrases
      .split('\n')
      .map(l => l.trim())
      .filter(l => l);
    savePhrases(sharedState.phrases);
    sharedState.status = null; // Reset state
  }
  res.redirect('/');
});

// --- Service Initialization ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Service operational on port ${PORT}`);
  setInterval(performCheck, config.checkInterval);
  performCheck(); // Initial check
});